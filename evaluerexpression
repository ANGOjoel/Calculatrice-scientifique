double evaluerExpression(char *calcul, int *index) 
{
    int a = 0, b = 0, k = 0, i = *index;
    char tab[100];
    double number[100];
    char operateur[100];
    double c, d, result;

    while (calcul[i] != '\0') 
    {
        // Chercher les fonctions trigonométriques et mathématiques
        if (strstr(calcul + i, "sin") == calcul + i) 
        {
            double sinresult = fonction(calcul, &i, "sin");
            number[b++] = sinresult;
        } 
        else if (strstr(calcul + i, "cos") == calcul + i) 
        {
            double cosresult = fonction(calcul, &i, "cos");
            number[b++] = cosresult;
        } 
        else if (strstr(calcul + i, "tan") == calcul + i) 
        {
            double tanresult = fonction(calcul, &i, "tan");
            number[b++] = tanresult;
        } 
        else if (strstr(calcul + i, "sqrt") == calcul + i) 
        {
            double sqrtresult = fonction(calcul, &i, "sqrt");
            number[b++] = sqrtresult;
        } 
        else if (strstr(calcul + i, "log") == calcul + i) 
        {
            double logresult = fonction(calcul, &i, "log");
            number[b++] = logresult;
        } 
        else if (strstr(calcul + i, "pow") == calcul + i) 
        {
            double powresult = fonction(calcul, &i, "pow");
            number[b++] = powresult;
        } 
        else if (isdigit(calcul[i]) || calcul[i] == '.') 
        {
            tab[a] = calcul[i];
            a++;
        } 
        else if (calcul[i] == '(') 
        {
            // Si on trouve une parenthèse, on appelle evaluerParenthese
            number[b++] = evaluerParenthese(calcul, &i);  // Appel récursif pour évaluer l'expression entre parenthèses
        } 
        else if (calcul[i] == '+' || calcul[i] == '-' || calcul[i] == '*' || calcul[i] == '/') 
        {
            if (a > 0) 
            {
                tab[a] = '\0';
                number[b++] = atof(tab);
                a = 0;
            }
            operateur[k++] = calcul[i];
        }
        i++;
    }

    // Finalisation des nombres restants
    if (a > 0) 
    {
        tab[a] = '\0';
        number[b++] = atof(tab);
    }

    // Calcul des opérations avec priorité aux * et /, en traitant d'abord les multiplications et divisions
    for (int i = 0; i < k; i++) 
    {
        if (operateur[i] == '*' || operateur[i] == '/') 
        {
            c = number[i];
            d = number[i + 1];
            double result;

            if (operateur[i] == '*') 
            {
                result = c * d;
            } 
            else if (operateur[i] == '/') 
            {
                result = c / d;
            } 
            else 
            {
                result = 0;
            }

            number[i] = result;

            // Décalage des éléments dans les tableaux pour supprimer l'élément traité
            for (int j = i + 1; j < b - 1; j++) 
            {
                number[j] = number[j + 1];
            }

            for (int j = i; j < k - 1; j++) 
            {
                operateur[j] = operateur[j + 1];
            }

            b--;
            k--;
            i--; // Réévaluer la position actuelle après le décalage
        }
    }

    // Calcul final pour les opérateurs + et - (addition et soustraction)
    result = number[0];
    for (int i = 0; i < k; i++) 
    {
        if (operateur[i] == '+') 
        {
            result += number[i + 1];
        } 
        else if (operateur[i] == '-') 
        {
            result -= number[i + 1];
        }
    }
    return result;
}

// Fonction principale
